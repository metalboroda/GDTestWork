//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/__Game/InputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""OnFeet"",
            ""id"": ""edc60668-bb67-46b8-94e0-5d94a7b9bb86"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e6aceea6-7ddc-4e3c-a0db-f66c41192e50"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AttackMain"",
                    ""type"": ""Button"",
                    ""id"": ""8aa875db-5292-4dcc-b7d2-c2ccbd3c243e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackSuper"",
                    ""type"": ""Button"",
                    ""id"": ""f8e852bf-44a5-4691-98f4-bf0cf782424d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f0d162b7-69d6-4537-bc99-4812a93d9bcd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6c6bc822-b44a-4642-bcf3-911d3d21768b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9b540501-785f-4735-88f3-c98da82af26a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d913cd66-1ba7-41ae-98b1-bc97f16f028d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a35a82d9-9056-4716-8499-82ac1b0b08c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f6870266-a496-4f51-b12b-19dab69f398a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackMain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7e5c6ff-af8f-44d8-8abc-a93aeea009f0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackSuper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OnFeet
        m_OnFeet = asset.FindActionMap("OnFeet", throwIfNotFound: true);
        m_OnFeet_Movement = m_OnFeet.FindAction("Movement", throwIfNotFound: true);
        m_OnFeet_AttackMain = m_OnFeet.FindAction("AttackMain", throwIfNotFound: true);
        m_OnFeet_AttackSuper = m_OnFeet.FindAction("AttackSuper", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OnFeet
    private readonly InputActionMap m_OnFeet;
    private List<IOnFeetActions> m_OnFeetActionsCallbackInterfaces = new List<IOnFeetActions>();
    private readonly InputAction m_OnFeet_Movement;
    private readonly InputAction m_OnFeet_AttackMain;
    private readonly InputAction m_OnFeet_AttackSuper;
    public struct OnFeetActions
    {
        private @PlayerInputActions m_Wrapper;
        public OnFeetActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_OnFeet_Movement;
        public InputAction @AttackMain => m_Wrapper.m_OnFeet_AttackMain;
        public InputAction @AttackSuper => m_Wrapper.m_OnFeet_AttackSuper;
        public InputActionMap Get() { return m_Wrapper.m_OnFeet; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnFeetActions set) { return set.Get(); }
        public void AddCallbacks(IOnFeetActions instance)
        {
            if (instance == null || m_Wrapper.m_OnFeetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnFeetActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @AttackMain.started += instance.OnAttackMain;
            @AttackMain.performed += instance.OnAttackMain;
            @AttackMain.canceled += instance.OnAttackMain;
            @AttackSuper.started += instance.OnAttackSuper;
            @AttackSuper.performed += instance.OnAttackSuper;
            @AttackSuper.canceled += instance.OnAttackSuper;
        }

        private void UnregisterCallbacks(IOnFeetActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @AttackMain.started -= instance.OnAttackMain;
            @AttackMain.performed -= instance.OnAttackMain;
            @AttackMain.canceled -= instance.OnAttackMain;
            @AttackSuper.started -= instance.OnAttackSuper;
            @AttackSuper.performed -= instance.OnAttackSuper;
            @AttackSuper.canceled -= instance.OnAttackSuper;
        }

        public void RemoveCallbacks(IOnFeetActions instance)
        {
            if (m_Wrapper.m_OnFeetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnFeetActions instance)
        {
            foreach (var item in m_Wrapper.m_OnFeetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnFeetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnFeetActions @OnFeet => new OnFeetActions(this);
    public interface IOnFeetActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttackMain(InputAction.CallbackContext context);
        void OnAttackSuper(InputAction.CallbackContext context);
    }
}
